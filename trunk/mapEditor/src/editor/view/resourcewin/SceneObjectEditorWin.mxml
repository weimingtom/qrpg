<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	creationComplete="init()" xmlns:resourcewin="editor.view.resourcewin.*" xmlns:menu="editor.view.menu.*">
	<mx:Script>
		<![CDATA[
			import editor.action.MoveAreaData;
			import editor.event.EventPool;
			import editor.modul.EditorModul;
			import editor.action.IAction;
			import editor.action.MoveCenterLine;
			import editor.action.ActionList;
			import editor.event.SOEditorEvent;
			import editor.core.OrderKey;
			import editor.event.EditEvent;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			private static var _win:SceneObjectEditorWin;
			private static var orgMenu:XMLList;
			
			private var _path:String;
			private var _fileName:String;
			
			private var _src:String;
			private var _width:int;
			private var _height:int;
			private var _x:int;
			private var _y:int;
			private var _cx:int;
			private var _cy:int;
			private var _hitAreaData:Array;
			private var _unwalkData:Array;     
			private var _script:String;
			private var _scriptType:String;
			
			private var _orgX:int;
			private var _orgY:int;
			
			private var _editLayer:String;
			
			private var _mx:int;
			private var _my:int;
			private var _isDown:Boolean;
			
			private var _target:*;
			private var _oldX:int;
			private var _oldY:int;
			private var _selectedNode:Node;
			
			private var act:IAction;
			private var tmpx:int;
			private var tmpy:int;
			
			/**
			 * 打开物体编辑界面。
			 * @param path 被编辑物体的XML路径。
			 */
			public static function open(data:*=null):SceneObjectEditorWin
			{
				if ( !_win ) _win = new SceneObjectEditorWin();
				if ( data )
				{
					if ( data is String ) _win.path = data;
					if ( data is XML )
					{
						trace(data.toXMLString())
						_win._path = EditorModul.sceneFilePath;
						_win.xmlData = data;
					}
				}
				if ( !_win.isPopUp )
				{
					PopUpManager.addPopUp(_win, Application.application as DisplayObject, true);
				}
				return null;
			}
			
			/**
			 * 被编辑物体的XML路径。
			 */
			public function set path(path:String):void
			{
				if ( path.match(/\.xml$/i) )
				{
					var arr:Array = path.split("\\");
					_fileName = arr.pop().toString();
					_path = arr.join("\\")+"\\";
					create();
				}
				else
				{
					_path = path;
					if ( !path.match(/\\$/) ) _path += "\\";
				}
			}
			
			public function set xmlData(xml:XML):void
			{
				_src = xml..item[0].@src;
				_width = Number(xml..frame[0].@width);
				_height = Number(xml..frame[0].@height);
				_x = Number(xml..frame[0].@x);
				_y = Number(xml..frame[0].@y);
				_cx = Number(xml..frame[0].@cx);
				_cy = Number(xml..frame[0].@cy);
				_orgX = _cx;
				_orgY = _cy;
				
				trace("src", _src)
				
				_hitAreaData = [];
				_unwalkData = [];
				if ( xml.hitarea.toString() ) _hitAreaData = arrTransform(xml.hitarea.toString());
				if ( xml.unwalk.toString() ) _unwalkData = arrTransform(xml.unwalk.toString());
				if ( xml.script.toString() )
				{
					_script = xml.script.toString();
					_scriptType = xml.script.@type;
				}
				
				//命令可用
				SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_SAVE).@enabled=true;
				//SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_SAVE_AS).@enabled=true;
				SOEditorMenu.menubarXML.folder.(@label=="正在编辑的层").@enabled=true;
				
				SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_SHOW_CENTER).@enabled=true;
				SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_PIC_CENTER).@enabled=true;
				
				//如果为打开文件，则数据需要重新设置
				if ( areaDataHit ) areaDataHit.setData(_hitAreaData);
				if ( areaDataUnwalk ) areaDataUnwalk.setData(_unwalkData);
			}
			
			/**
			 * 正在编辑的层。层分为：只显示物体，中心点，点击区域，不可走区域。
			 */
			public function set editLayer(str:String):void
			{
				//处理修改前的设置
				if ( _editLayer==OrderKey.SO_LAYER_NONE )
				{
					img.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					img.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				}
				else if ( _editLayer==OrderKey.SO_LAYER_CENTER )
				{
					centerLine.visible = false;
					centerLine.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					centerLine.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_RESET_CENTER).@enabled=false;
				}
				else if ( _editLayer==OrderKey.SO_LAYER_HIT )
				{
					areaDataHit.visible = false;
					selectedNode = null;
					
					areaDataHit.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					areaDataHit.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_ADD_NODE).@enabled=false;
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_RESET_NODE).@enabled=false;
				}
				else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
				{
					centerLine.visible = false;
					centerLine.mouseChildren = true;
					centerLine.mouseEnabled = true;
					
					areaDataUnwalk.visible = false;
					selectedNode = null;
					
					areaDataUnwalk.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					areaDataUnwalk.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_ADD_NODE).@enabled=false;
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_RESET_NODE).@enabled=false;
				}
				//修改
				_editLayer = str;
				//处理修改后的设置
				if ( _editLayer==OrderKey.SO_LAYER_NONE )
				{
					img.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					img.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				}
				else if ( _editLayer==OrderKey.SO_LAYER_CENTER )
				{
					centerLine.visible = true;
					centerLine.setCenter(img.x+_cx, img.y+_cy, false);
					//centerLine.centerX = img.x+_cx;
					//centerLine.centerY = img.y+_cy;
					centerLine.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					centerLine.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_RESET_CENTER).@enabled=true;
				}
				else if ( _editLayer==OrderKey.SO_LAYER_HIT )
				{
					areaDataHit.visible = true;
					
					areaDataHit.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					areaDataHit.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_ADD_NODE).@enabled=true;
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_RESET_NODE).@enabled=true;
				}
				else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
				{
					centerLine.visible = true;
					centerLine.setCenter(img.x+_cx, img.y+_cy, false);
					centerLine.mouseChildren = false;
					centerLine.mouseEnabled = false;
					
					areaDataUnwalk.visible = true;
					
					areaDataUnwalk.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
					areaDataUnwalk.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_ADD_NODE).@enabled=true;
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_RESET_NODE).@enabled=true;
				}
			}
			public function get editLayer():String
			{
				return _editLayer;
			}
			
			/**
			 * 被选择的节点。
			 */
			private function set selectedNode(node:Node):void
			{
				if ( _selectedNode )
				{
					_selectedNode.selected = false;
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_DELETE_NODE).@enabled=false;
				}
				_selectedNode = node;
				if ( _selectedNode )
				{
					_selectedNode.selected = true;
					SOEditorMenu.menubarXML.order.(@data==OrderKey.SO_DELETE_NODE).@enabled=true;
				}
			}
			private function get selectedNode():Node
			{
				return _selectedNode;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				centerLine.addEventListener(EditEvent.CENTER_CHANGE, centerChangeHandler);
				
				if ( _hitAreaData ) areaDataHit.setData(_hitAreaData);
				areaDataHit.visible = false;
				
				if ( _unwalkData ) areaDataUnwalk.setData(_unwalkData);
				areaDataUnwalk.visible = false;
			}
			
			/**
			 * 初始化
			 */
			private function init():void
			{
				if ( !orgMenu )
				{
					orgMenu = SOEditorMenu.menubarXML.copy();
				}
				else
				{
					SOEditorMenu.menubarXML = orgMenu.copy();
				}
				createDisplay();
				EventPool.addEventListener(SOEditorEvent.ORDER, orderHandler);
				EventPool.addEventListener(EditEvent.RESIZE, resizeHandler);
				resizeHandler();
			}
			
			/**
			 * 按设置的XML文件路径读出XML后生成所需要的数据。
			 */
			private function create():void
			{
				if ( !_path || !_fileName ) return;
				var xml:XML;
				var file:File = new File(_path+_fileName);
				var stream:FileStream = new FileStream();
				try
				{
					stream.open(file, FileMode.READ);
					xml = new XML(stream.readUTFBytes(stream.bytesAvailable));
				}
				catch ( e:* )
				{
					trace("文件“"+(_path+_fileName)+"”不存在。");
				}
				if ( xml )
				{
					xmlData = xml;
				}
			}
			
			/**
			 * 建立需要显示的图片。
			 */
			private function createDisplay():void
			{
				if ( !_src ) return;
				img.source = _path+_src;
				img.addEventListener(Event.COMPLETE, imgCompleteHandler);
				editLayer = OrderKey.SO_LAYER_NONE;
			}
			
			/**
			 * 将数组里的字串换成数字。
			 */
			private function arrTransform(str:String):Array
			{
				var returnArr:Array = [];
				var arr:Array = str.split(",");
				var i:int;
				var len:int = arr.length;
				for ( i=0; i<len; i++ )
				{
					returnArr.push(Number(arr[i]));
				}
				return returnArr;
			}
			
			/**
			 * 
			 */
			private function getXML():XML
			{
				if ( !_src ) return null;
				var xml:XML = <bldg>
										<items>
											<item src={_src}>
												<actions>
													<action type="stop" name="default" defaultAction="true">
														<frame width={_width} height={_height} x={_x} y={_y} cx={_cx} cy={_cy}/>
													</action>
												</actions>
											</item>
										</items>
										<hitarea/>
										<unwalk/>
									</bldg>
				
				if ( areaDataHit.getData().length>0 ) xml.hitarea = areaDataHit.getData().toString();
				if ( areaDataUnwalk.getData().length>0 ) xml.unwalk = areaDataUnwalk.getData().toString();
				if ( _script ) xml.appendChild(<script type={_scriptType}>{_script}</script>)
				
				return xml;
			}
			
			//===============================
			//                            Handler
			//===============================
			
			private function orderHandler(evt:EditEvent):void
			{
				//打开新文件
				if ( evt.data.@data==OrderKey.SO_OPEN )
				{
					//TODO
				}
				//保存
				else if ( evt.data.@data==OrderKey.SO_SAVE )
				{
					if ( _fileName )
					{
						var save:SaveObj = new SaveObj(_path+_fileName, getXML());
						save.save();
					}
					else
					{
						new EditEvent(EditEvent.SCENE_OBJECT_EDIT_SAVE, getXML()).dispatch();
					}
				}
				//另存为
				else if ( evt.data.@data==OrderKey.SO_SAVE_AS )
				{
					//TODO
				}
				//退出编辑
				else if ( evt.data.@data==OrderKey.SO_EXIT )
				{
					PopUpManager.removePopUp(this);
					_win = null;
					new SOEditorEvent(SOEditorEvent.EXIT);
				}
				
				//撤消
				else if ( evt.data.@data==OrderKey.SO_UNDO )
				{
					ActionList.undoSub();
				}
				//重做
				else if ( evt.data.@data==OrderKey.SO_REDO )
				{
					ActionList.redoSub();
				}
				
				//复位中心点位置
				else if ( evt.data.@data==OrderKey.SO_RESET_CENTER )
				{
					//setCenter(_orgX, _orgY);
					act = new MoveCenterLine(centerLine);
					MoveCenterLine(act).isMove = true;
					MoveCenterLine(act).newX = img.x + _orgX;
					MoveCenterLine(act).newY = img.y + _orgY;
					MoveCenterLine(act).oldX = centerLine.centerX;
					MoveCenterLine(act).oldY = centerLine.centerY;
					ActionList.addSubAction(act);
				}
				//中心点居中
				else if ( evt.data.@data==OrderKey.SO_SHOW_CENTER )
				{
					var oldx:int = img.x;
					var oldy:int = img.y;
					img.x = (this.width>>1)-_cx;
					img.y = (this.height>>1)-_cy;
					
					act = new MoveCenterLine(centerLine);
					MoveCenterLine(act).isMove = true;
					MoveCenterLine(act).newX = img.x + _cx;
					MoveCenterLine(act).newY = img.y + _cy;
					MoveCenterLine(act).oldX = centerLine.centerX;
					MoveCenterLine(act).oldY = centerLine.centerY;
					ActionList.addSubAction(act);
					//centerLine.centerX = img.x + _cx;
					//centerLine.centerY = img.y + _cy;
					//areaData.moveData(img.x-oldx, img.y-oldy);
				}
				//图片居中
				else if ( evt.data.@data==OrderKey.SO_PIC_CENTER )
				{
					var ox:int = img.x;
					var oy:int = img.y;
					img.x = this.width-img.content.width>>1;
					img.y = this.height-img.content.height>>1;
					
					act = new MoveCenterLine(centerLine);
					MoveCenterLine(act).isMove = true;
					MoveCenterLine(act).newX = img.x + _cx;
					MoveCenterLine(act).newY = img.y + _cy;
					MoveCenterLine(act).oldX = centerLine.centerX;
					MoveCenterLine(act).oldY = centerLine.centerY;
					ActionList.addSubAction(act);
					//centerLine.centerX = img.x + _cx;
					//centerLine.centerY = img.y + _cy;
					//areaData.moveData(img.x-ox, img.y-oy);
				}
				//添加节点
				else if ( evt.data.@data==OrderKey.SO_ADD_NODE )
				{
					if ( _editLayer==OrderKey.SO_LAYER_HIT )
					{
						selectedNode = areaDataHit.addNodeAfter(_selectedNode);
					}
					else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
					{
						selectedNode = areaDataUnwalk.addNodeAfter(_selectedNode);
					}
				}
				//删除节点
				else if ( evt.data.@data==OrderKey.SO_DELETE_NODE )
				{
					if ( _selectedNode )
					{
						if ( _editLayer==OrderKey.SO_LAYER_HIT )
						{
							areaDataHit.deleteNode(_selectedNode);
						}
						else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
						{
							areaDataUnwalk.deleteNode(_selectedNode);
						}
						selectedNode = null;
					}
				}
				//复位节点
				else if ( evt.data.@data==OrderKey.SO_RESET_NODE )
				{
					if ( _editLayer==OrderKey.SO_LAYER_HIT )
					{
						areaDataHit.setData(_hitAreaData);
						areaDataHit.x = img.x+_cx;
						areaDataHit.y = img.y+_cy;
					}
					else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
					{
						areaDataUnwalk.setData(_unwalkData);
						areaDataUnwalk.x = img.x+_cx;
						areaDataUnwalk.y = img.y+_cy;
					}
				}
				//设置正在编辑的图𢺿层
				else if ( evt.data.@data==OrderKey.SO_LAYER_NONE )
				{
					editLayer = OrderKey.SO_LAYER_NONE;
				}
				else if ( evt.data.@data==OrderKey.SO_LAYER_CENTER )
				{
					editLayer = OrderKey.SO_LAYER_CENTER;
				}
				else if ( evt.data.@data==OrderKey.SO_LAYER_HIT )
				{
					editLayer = OrderKey.SO_LAYER_HIT;
				}
				else if ( evt.data.@data==OrderKey.SO_LAYER_UNWALK )
				{
					editLayer = OrderKey.SO_LAYER_UNWALK;
				}
			}
			
			private function centerChangeHandler(evt:EditEvent):void
			{
				var dx:int = centerLine.centerX - evt.data[0];
				var dy:int = centerLine.centerY - evt.data[1];
				trace("dx",dx)
				trace("dy",dy)
				
				areaDataHit.moveData(dx, dy);
				areaDataUnwalk.moveData(dx, dy);
				
				_cx = centerLine.centerX-img.x;
				_cy = centerLine.centerY-img.y;
			}
			
			private function resizeHandler(evt:EditEvent=null):void
			{
				if ( isPopUp )
				{
					this.width = Application.application.width;
					this.height = Application.application.height;
				}
			}
			
			//===============================
			//                          Mouse Handler
			//===============================
			
			private function mouseDownHandler(evt:MouseEvent):void
			{
				if ( _editLayer==OrderKey.SO_LAYER_NONE )
				{
					_isDown = true;
					_mx = mouseX;
					_my = mouseY;
					this.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				}
				else if ( _editLayer==OrderKey.SO_LAYER_CENTER )
				{
					_isDown = true;
					_mx = mouseX;
					_my = mouseY;
					centerLine.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
					act = new MoveCenterLine(centerLine);
					MoveCenterLine(act).oldX = centerLine.centerX;
					MoveCenterLine(act).oldY = centerLine.centerY;
				}
				else if ( _editLayer==OrderKey.SO_LAYER_HIT )
				{
					_target = evt.target;
					if ( _target is AreaData )
					{
						_oldX = _target.x;
						_oldY = _target.y;
						selectedNode = null;
					}
					else if ( _target is Node )
					{
						selectedNode = _target as Node;
					}
					_isDown = true;
					_mx = mouseX;
					_my = mouseY;
					this.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
					act = new MoveAreaData(areaDataHit);
					(act as MoveAreaData).oldData = areaDataHit.getData();
				}
				else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
				{
					_target = evt.target;
					if ( _target is AreaData )
					{
						_oldX = _target.x;
						_oldY = _target.y;
						selectedNode = null;
					}
					else if ( _target is Node )
					{
						selectedNode = _target as Node;
					}
					_isDown = true;
					_mx = mouseX;
					_my = mouseY;
					this.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
					act = new MoveAreaData(areaDataUnwalk);
					(act as MoveAreaData).oldData = areaDataUnwalk.getData();
				}
			}
			
			private function mouseUpHandler(evt:MouseEvent):void
			{
				if ( _editLayer==OrderKey.SO_LAYER_NONE )
				{
					_isDown = false;
					this.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				}
				else if ( _editLayer==OrderKey.SO_LAYER_CENTER )
				{
					_isDown = false;
					centerLine.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
					if ( (act as MoveCenterLine).isMove )
					{
						(act as MoveCenterLine).newX = centerLine.centerX;
						(act as MoveCenterLine).newY = centerLine.centerY;
						ActionList.addSubAction(act);
						act = null;
					}
					//setCenter(centerLine.centerX-img.x, centerLine.centerY-img.y);
				}
				else if ( _editLayer==OrderKey.SO_LAYER_HIT )
				{
					if ( _target is AreaData )
					{
						var area:AreaData = _target as AreaData;
						area.moveData(area.x-_oldX, area.y-_oldY);
						area.x = _oldX;
						area.y = _oldY;
					}
					if ( act && (act as MoveAreaData).isMove )
					{
						(act as MoveAreaData).newData = areaDataHit.getData();
						ActionList.addSubAction(act);
						act = null;
					}
					
					_target = null;
					this.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				}
				else if ( _editLayer==OrderKey.SO_LAYER_UNWALK )
				{
					if ( _target is AreaData )
					{
						var area2:AreaData = _target as AreaData;
						area2.moveData(area2.x-_oldX, area2.y-_oldY);
						area2.x = _oldX;
						area2.y = _oldY;
					}
					if ( act && (act as MoveAreaData).isMove )
					{
						(act as MoveAreaData).newData = areaDataUnwalk.getData();
						ActionList.addSubAction(act);
						act = null;
					}
					_target = null;
					this.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				}
			}
			
			private function mouseMoveHandler(evt:MouseEvent=null):void
			{
				if ( _isDown && _editLayer==OrderKey.SO_LAYER_NONE )
				{
					img.x += mouseX-_mx;
					img.y += mouseY-_my;
					
					areaDataHit.x = img.x+_cx;
					areaDataHit.y = img.y+_cy;
					
					areaDataUnwalk.x = img.x+_cx;
					areaDataUnwalk.y = img.y+_cy;
					
					_mx = mouseX;
					_my = mouseY;
				}
				else if ( _isDown && _editLayer==OrderKey.SO_LAYER_CENTER )
				{
					centerLine.centerMove(mouseX-_mx, mouseY-_my, false);
					(act as MoveCenterLine).isMove = true;
					//centerLine.centerX += mouseX-_mx;
					//centerLine.centerY += mouseY-_my;
					_mx = mouseX;
					_my = mouseY;
				}
				else if ( _isDown && _editLayer==OrderKey.SO_LAYER_HIT )
				{
					if ( !(_target is AreaData || _target is Node) ) return;
					_target.x += mouseX-_mx;
					_target.y += mouseY-_my;
					_mx = mouseX;
					_my = mouseY;
					if ( _target is Node )
					{
						((_target as Node).parent as AreaData).drawLine();
					}
					(act as MoveAreaData).isMove = true;
				}
				else if ( _isDown && _editLayer==OrderKey.SO_LAYER_UNWALK )
				{
					if ( !(_target is AreaData || _target is Node) ) return;
					_target.x += mouseX-_mx;
					_target.y += mouseY-_my;
					_mx = mouseX;
					_my = mouseY;
					if ( _target is Node )
					{
						((_target as Node).parent as AreaData).drawLine();
					}
					(act as MoveAreaData).isMove = true;
				}
			}
			
			private function imgCompleteHandler(evt:Event):void
			{
				//img.x = this.width-img.content.width>>1;
				//img.y = this.height-img.content.height>>1;
				img.x = (width>>1)-_cx;
				img.y = (height>>1)-_cy;
				
				areaDataHit.x = img.x + _cx;
				areaDataHit.y = img.y + _cy;
				
				areaDataUnwalk.x = img.x + _cx;
				areaDataUnwalk.y = img.y + _cy;
			}
			
		]]>
	</mx:Script>
	<mx:SWFLoader id="img"/>
	<resourcewin:ShowCenter id="centerLine" visible="false" width="100%" height="100%"/>
	<resourcewin:AreaData id="areaDataHit"/>
	<resourcewin:AreaData id="areaDataUnwalk"/>
	<menu:SOEditorMenu id="menu" x="0" y="0"/>
</mx:Canvas>
